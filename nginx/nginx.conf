events {}

http {
  server_names_hash_bucket_size  64;
  error_log /etc/nginx/error_log.log debug;
  client_max_body_size 20m;
  proxy_cache_path /etc/nginx/cache keys_zone=one:500m max_size=1000m;

  # Redirect all http requests to https
  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
  }

  # Redirect requests from https://www.example.com to https://example.com
  server {
    server_name www.example.com;

    listen 443 ssl;
    # Include SSL certificates managed by certbot
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # Include letsencrypt standards
    include /etc/letsencrypt/options-ssl-nginx.conf;

    # Use docker DNS for proxy resolving
    resolver 127.0.0.11;
    
    # https://www.example.com -> https://example.com
    rewrite ^/(.*) https://example.com/$1 permanent;
  }
  server {
    server_name example.com;
  
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    resolver 127.0.0.11;

    index index.php;
    try_files $uri $uri/ =404;
  
    # This must match your container_name set in docker-compose.yml!
    set $wordpress http://production-wordpress;

    location / {
      proxy_set_header    X-Forwarded-Host   $host;
      proxy_set_header    X-Forwarded-Server $host;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header    X-Real-IP          $remote_addr;
      proxy_set_header    Host               $host;
      proxy_set_header    X-Forwarded-Proto https;
      proxy_pass $wordpress;
    }
  }
}
